{
  "abstract" : [
    {
      "text" : "SwiftSMTPVapor builds on SwiftSMTP and adds some convenience for using it with Vapor. First, you need to configure SwiftSMTPVapor once at startup. This is usually done in ",
      "type" : "text"
    },
    {
      "code" : "configure(_:)",
      "type" : "codeVoice"
    },
    {
      "text" : ". There are multiple ways to configure SwiftSMTP here. The simplest is to use environment variables (see above for details on that):",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [

      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/SwiftSMTPVapor\/documentation\/SwiftSMTPVapor"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "SwiftSMTPVapor",
    "modules" : [
      {
        "name" : "SwiftSMTPVapor"
      }
    ],
    "role" : "collection",
    "roleHeading" : "Framework",
    "symbolKind" : "module",
    "title" : "SwiftSMTPVapor"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "code" : [
            "\/\/\/ Initialize SwiftSMTP",
            "app.swiftSMTP.initialize(with: .fromEnvironment())"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Another way to initialize SwiftSMTP is to use the ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/SwiftSMTPVapor\/documentation\/SwiftSMTPVapor\/SMTPInitializer",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " lifecycle handler:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\/\/\/ Initialize SwiftSMTP",
            "app.lifecycle.use(SMTPInitializer(configuration: .fromEnvironment()))"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The main difference between the two is that with the former, SwiftSMTP is ready to use after the call. The latter will initialize SwiftSMTP during the boot of the Vapor Application. In most cases, this difference doesn’t matter and the two are equivalent.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can of course also provide your own configuration. There are also additional parameters for specifiying the source of the event loop group to use for mailers, the maximum connections for mailers and whether or not to write transmission logs. Usually, those can be left to their defaults.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Next, you can use SwiftSMTP inside a request:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func handleRequest(_ request: Request) -> EventLoopFuture<Response> {",
            "    let email: Email \/\/ created before",
            "    return request.swiftSMTP.mailer.send(email).transform(to: Response())",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This uses the shared mailer, which is lazily initialized. If you need a dedicated mailer, you can use the ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/SwiftSMTPVapor\/documentation\/SwiftSMTPVapor\/Vapor\/Application\/SwiftSMTP-swift.struct\/createNewMailer()",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " method:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func handleRequest(_ request: Request) -> EventLoopFuture<Response> {",
            "    let email: Email \/\/ created before",
            "    return request.swiftSMTP.createNewMailer().send(email).transform(to: Response())",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "When using the application’s event loop group (which is the default), there will be almost no difference between the two - except maybe for the connection limit. A mailer has a connection limit of two connections by default, which means that a new mailer does not have any connections in its queue.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "When using a custom event loop group source, however, creating a new mailer will also create a new event loop group. It’s important to keep this in mind, since you’re responsible for shutting down that event loop group - whereas SwiftSMTPVapor takes care of shutting down the event loop group of the shared mailer if you use a custom source there.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "SwiftSMTP also works with Swift concurrency:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func handleRequest(_ request: Request) async throws -> Response {",
            "    let email: Email \/\/ created before",
            "    try await request.swiftSMTP.mailer.send(email)",
            "    return Response()",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "topicSections" : [
    {
      "anchor" : "Structures",
      "generated" : true,
      "identifiers" : [
        "doc:\/\/SwiftSMTPVapor\/documentation\/SwiftSMTPVapor\/SMTPInitializer"
      ],
      "title" : "Structures"
    },
    {
      "anchor" : "Enumerations",
      "generated" : true,
      "identifiers" : [
        "doc:\/\/SwiftSMTPVapor\/documentation\/SwiftSMTPVapor\/SwiftSMTPEventLoopGroupSource",
        "doc:\/\/SwiftSMTPVapor\/documentation\/SwiftSMTPVapor\/SwiftSMTPMaxConnectionsConfiguration"
      ],
      "title" : "Enumerations"
    },
    {
      "anchor" : "Extended-Modules",
      "generated" : true,
      "identifiers" : [
        "doc:\/\/SwiftSMTPVapor\/documentation\/SwiftSMTPVapor\/Logging",
        "doc:\/\/SwiftSMTPVapor\/documentation\/SwiftSMTPVapor\/Vapor"
      ],
      "title" : "Extended Modules"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/swiftsmtpvapor"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://SwiftSMTPVapor/documentation/SwiftSMTPVapor": {
  "abstract" : [
    {
      "text" : "SwiftSMTPVapor builds on SwiftSMTP and adds some convenience for using it with Vapor. First, you need to configure SwiftSMTPVapor once at startup. This is usually done in ",
      "type" : "text"
    },
    {
      "code" : "configure(_:)",
      "type" : "codeVoice"
    },
    {
      "text" : ". There are multiple ways to configure SwiftSMTP here. The simplest is to use environment variables (see above for details on that):",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/SwiftSMTPVapor\/documentation\/SwiftSMTPVapor",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "SwiftSMTPVapor",
  "type" : "topic",
  "url" : "\/documentation\/swiftsmtpvapor"
},
"doc://SwiftSMTPVapor/documentation/SwiftSMTPVapor/Logging": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/SwiftSMTPVapor\/documentation\/SwiftSMTPVapor\/Logging",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "Logging",
  "type" : "topic",
  "url" : "\/documentation\/swiftsmtpvapor\/logging"
},
"doc://SwiftSMTPVapor/documentation/SwiftSMTPVapor/SMTPInitializer": {
  "abstract" : [
    {
      "text" : "Initializes the SwiftSMTP configuration on the application on boot.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "You can add it to your application in ",
      "type" : "text"
    },
    {
      "code" : "configure",
      "type" : "codeVoice"
    },
    {
      "text" : " by using ",
      "type" : "text"
    },
    {
      "code" : "app.lifecycle.use(SMTPInitializer(...))",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "SMTPInitializer"
    }
  ],
  "identifier" : "doc:\/\/SwiftSMTPVapor\/documentation\/SwiftSMTPVapor\/SMTPInitializer",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "SMTPInitializer"
    }
  ],
  "role" : "symbol",
  "title" : "SMTPInitializer",
  "type" : "topic",
  "url" : "\/documentation\/swiftsmtpvapor\/smtpinitializer"
},
"doc://SwiftSMTPVapor/documentation/SwiftSMTPVapor/SwiftSMTPEventLoopGroupSource": {
  "abstract" : [
    {
      "text" : "Represents the source for the event loop group used by the Mailer.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "enum"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "SwiftSMTPEventLoopGroupSource"
    }
  ],
  "identifier" : "doc:\/\/SwiftSMTPVapor\/documentation\/SwiftSMTPVapor\/SwiftSMTPEventLoopGroupSource",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "SwiftSMTPEventLoopGroupSource"
    }
  ],
  "role" : "symbol",
  "title" : "SwiftSMTPEventLoopGroupSource",
  "type" : "topic",
  "url" : "\/documentation\/swiftsmtpvapor\/swiftsmtpeventloopgroupsource"
},
"doc://SwiftSMTPVapor/documentation/SwiftSMTPVapor/SwiftSMTPMaxConnectionsConfiguration": {
  "abstract" : [
    {
      "text" : "Represents the maximum connections configuration per Mailer.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "enum"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "SwiftSMTPMaxConnectionsConfiguration"
    }
  ],
  "identifier" : "doc:\/\/SwiftSMTPVapor\/documentation\/SwiftSMTPVapor\/SwiftSMTPMaxConnectionsConfiguration",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "SwiftSMTPMaxConnectionsConfiguration"
    }
  ],
  "role" : "symbol",
  "title" : "SwiftSMTPMaxConnectionsConfiguration",
  "type" : "topic",
  "url" : "\/documentation\/swiftsmtpvapor\/swiftsmtpmaxconnectionsconfiguration"
},
"doc://SwiftSMTPVapor/documentation/SwiftSMTPVapor/Vapor": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/SwiftSMTPVapor\/documentation\/SwiftSMTPVapor\/Vapor",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "Vapor",
  "type" : "topic",
  "url" : "\/documentation\/swiftsmtpvapor\/vapor"
},
"doc://SwiftSMTPVapor/documentation/SwiftSMTPVapor/Vapor/Application/SwiftSMTP-swift.struct/createNewMailer()": {
  "abstract" : [
    {
      "text" : "Creates a new Mailer.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "The caller is responsible for keeping the mailer alive until and cleaning up after all mails have been sent.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "createNewMailer"
    },
    {
      "kind" : "text",
      "text" : "() -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:9SwiftSMTP6MailerC",
      "text" : "Mailer"
    }
  ],
  "identifier" : "doc:\/\/SwiftSMTPVapor\/documentation\/SwiftSMTPVapor\/Vapor\/Application\/SwiftSMTP-swift.struct\/createNewMailer()",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "createNewMailer()",
  "type" : "topic",
  "url" : "\/documentation\/swiftsmtpvapor\/vapor\/application\/swiftsmtp-swift.struct\/createnewmailer()"
}
}
}